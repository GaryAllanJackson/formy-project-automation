
╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                              CONFIGURATION FILE FORMAT                                                                                                 ║
╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
// NOTES: Lines beginning with double slashes denote comments, in the configuration file, and will be ignored by the configuration reader.
// BLANK LINES ARE NOT PERMITTED!!!  If you need visual space, start the blank line with double slashes and that is acceptable.
// Configuration files are key=value pairs where you are setting a configurable value using the equal assignment operator
// TestFileName - entries beginning with this are used to point to the file/files containing the test setting commands.
//    -   These entries can be numbered so that they can be sorted and taken in order when reading a folder of files or 
//         - they can have the same entry and be either sorted alphabetically, if SortSpecifiedTestFiles is true, or read 
//         - in the order in which they appear, if SortSpecifiedTestFiles is set to false.
//    -   The Test Setting Commands file is a described in detail below under the Test File Format Section.
//
// ScreenShotSaveFolder - folder where screenshots should be saved - Must already exist
// BrowserType values: Firefox, Chrome, PhantomJS
// RunHeadless - can be true to run headless or false to show the browser, but PhantomJs is always headless
// TestAllBrowsers - can be true or false.  If false, BrowserType must be set.  If true, BrowserType is ignored and the program will cycle through all browsers.
// SpecifyTestFiles - Can be true to specifiy each file and the order that files are run, or false to select a folder of files that will be ordered alphabetically.
// SortSpecifiedTestFiles - This setting depends upon SpecifyTestFiles being true.
//    -   Can be set to false to manually place the files in the order that you want them to be executed. (Default)
//    -   Can be true to sort the files alphabetically and numerically using the number following the word TestFileName.
//       -   An example of the sorted order follows: (TestFileName0, TestFileName1, TestFileName2 etc..)
//       -   This forces a sort to be performed on the names so these will sort numerically.
//       -   If multiple entries have the same number, like (TestFileName0, TestFileName0) those entries will also be sorted alphabetically.
// TestFolderName - will contain the folder where test files exist when SpecifyTestFiles is false.
// FolderFileFilterType - type of filtering you want to use to select similarly named files within a folder.  Options are: 
//    -   [Starts With], [Contains] and [Ends With] 
//    -   [Starts With] - will select only the test files starting with the filter entered
//    -   [Contains] - will select only test files containing the filter entered
//    -   [Ends With] - will select only test files ending with the filter entered
// FolderFileFilter - the filter used to select only matching files within the Test Folder.
// MaxScreenShotsToTake - the maximum number of screen shots to take including any unscheduled screenshots taken due to an error.
//    -   When -1, only errors will create screen shots.
//    -   When 0, there is no limit and all screenshots will be taken.
//    -   When any other number, that number of screenshots or less will be taken depending upon the test and the max set.
//    -   Errors like, Element not found, will create a screenshot to allow you to see the page the application was on when 
//         the error occurred.
//
// In the example configuration file provided below, a single specific test file is being tested, the screen shot folder is specified, 
// but no screenshots will be taken, only the test Chrome browser will be used and it will be visible, the TestFolderName specified, 
// FolderFileFilterType specified, and FolderFileFilter specified  are all disregarded because SpecifiyTestFiles is true, meaning 
// only files specifically specified will be used.
// The commented test file lines were included to show a means in which different files can be setup but can be commented so that only 
// the intended test files run.   
//  These comments were also included  to show that duplicate TestFileName0 keys can be used as well as uniquely named 
// incremental TestFileNames like TestFileName1, TestFileName2 etc.. can be used.  Just ensure that they are not preceded by 
// comment characters, if intended to run.  
//
//TestFileName0=C:\TestSettings2.txt
//TestFileName1=C:\TestSettings2.txt
TestFileName0=C:\TestSettings.txt
ScreenShotSaveFolder=C:\ScreenShots\MySite
MaxScreenShotsToTake=-1
BrowserType=Chrome
RunHeadless=false
TestAllBrowsers=false
SpecifyTestFiles=true
SortSpecifiedTestFiles=false
TestFolderName=C:\MyTestFolder\
FolderFileFilterType=Starts_With
FolderFileFilter=MyPhrase


╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                              TEST FILE FORMAT                                                                                                          ║
╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
The Test file is an xml file, that can include comments just like any xml file.
It begins with the XML declaration followed by the <testSteps> root element.
Each test is grouped in <step> elements, which consist of the all or some of the following nodes:

<command>Command to execute</command> - The command node, describes the command to execute and is always required.
<actionType>read/write</actionType> - The actionType node can be set to read or write describing this as a read or write action.
	Assertions where an element value is being checked against a supplied value is a read.
	Navigation, clicking, populating text boxes, selecting select options, accessing context menu etc.. 
		are write actionTypes because they are performing an action rather than just reading a value.  
<accessor>select-menu</accessor> - The element identifier.
<accessorType>ID</accessorType> - The type of element identifier. (xPath, ClassName, CssSelector, Id, TagName)
<expectedValue>What you expect to retrieve</expectedValue> - The optional expectedValue node, if present, 
	acts as the expected value of the element value being retrieved as the actual value.
<crucial>TRUE</crucial> - The crucial node can be set to True or False and determines if testing should stop 
	or proceed if the step fails.  Set to True for stop and False for proceed.
<arguments></arguments> - The arguments node is a container of numbered argument nodes.
	Argument order is crucial and out of order arguments can have unpredictable results.
	See the help sections below to learn the order of arguments for each command type.
<arg1>First argument</arg1> The numbered arguments vary greatly depending upon the type of command.
	<arg2>Second argument</arg2>
	<arg3>Third argument</arg3>
	Generally speaking, these numbered arguments are arranged so that the most relevant pieces of information 
	are the first items and the less relevant pieces of information are last.
	The order of the arguments is crucial, while properly numbering is important but improperly numbering is forgivable as long as the xml is valid.
There are few, if any, examples that use all nodes, so in the Navigation example below note that this does not use 
Accessor and AccessorType nodes because it accesses the URL instead of a page element when making an assertion. 
Also, keep in mind that while this represents the structure of a test file, it consists of only one of many possible test steps.

Usually, the test file will consist of multiple steps like (navigation, check element values(multiple steps) click element...etc...
<?xml version="1.0" encoding="UTF-8" ?>
<testSteps>
	<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<expectedValue>https://www.marvel.com/</expectedValue>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://www.marvel.com</arg1>
		<arg2>1000</arg2>
	</arguments>
	</step>
</testSteps>


═════════[ NAVIGATION ]════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
All Navigation steps should be marked as crucial, as all subsequent checks require that navigation complete successfully!!!
An assertion does not have to be part of navigation, but it probably should be!!!
To navigate without checking the URL, remove the expectedValue node completely as displayed in the example below.

To Navigate, without checking the URL to ensure that navigation occurred properly.
Please note that making this crucial is irrelevant as no assertions will be made.
<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://formy-project.herokuapp.com/form</arg1>
		<arg2>4000</arg2>
	</arguments>
</step>

═════════[ NAVIGATION WITH SUCCESSFUL NAVIGATION CONFIRMATION ]════════════════════════════════════════════════════════════════════════════════════════════════
To Navigate, assert that the URL is what is in the expectedValue node and to wait 4 thousand milli-seconds before making the assertion to allow the page to load:
PLEASE NOTE: Asserting that the URL is correct does not mean that a server transfer didn't redirect the URL to a different page but leave the URL untouched. 
<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<expectedValue>https://formy-project.herokuapp.com/form</expectedValue>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://formy-project.herokuapp.com/form</arg1>
		<arg2>4000</arg2>
	</arguments>
</step>

To Navigate, assert that the URL is as expected, add a time delay and set the browser dimensions to 800 width by 800 height:
<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<expectedValue>https://formy-project.herokuapp.com/form</expectedValue>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://formy-project.herokuapp.com/form</arg1>
		<arg2>4000</arg2>
		<arg3>w=800 h=800</arg3>
	</arguments>
</step>

═════════[ NAVIGATION WITH AUTHENTICATION WITH AND WITHOUT NAVIGATION CONFIRMATION ]═══════════════════════════════════════════════════════════════════════════

To Navigate and Authenticate with username and password and assert that the URL is in the expectedValue node and to wait 4 thousand milli-seconds 
before making the assertion to allow the page to load:
<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<expectedValue>https://formy-project.herokuapp.com/form</expectedValue>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://username:password@formy-project.herokuapp.com/form</arg1>
		<arg2>4000</arg2>
	</arguments>
</step>

To Navigate and Authenticate with username and password:
<step>
	<command>navigate</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://username:password@formy-project.herokuapp.com/form</arg1>
		<arg2>4000</arg2>
	</arguments>
</step>

═════════[ LOGIN WITH NAVIGATION ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To login and navigate in one step.
Please note this is for normal passwords which cannot contain spaces or characters that require escaping.
<step>
	<command>login</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>username</arg1>
		<arg2>password</arg2>
		<arg3>http://www.myCoolPage.com</arg3>
	</arguments>
</step>

═════════[ ALERT POPUP LOGIN ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

To login when presented with an alert style popup, which could happen upon landing on the site or after the site redirects you, and to make this crucial.
Please note this is for normal passwords which cannot contain spaces or characters that require escaping.
<step>
	<command>login</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>username</arg1>
		<arg2>password</arg2>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK URL WITHOUT NAVIGATION ]══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To check a URL without navigating and to make it crucial.  To make it non-crucial change the last parameter to false.
<step>
	<command>check url</command>
	<actionType>write</actionType>
	<expectedValue>https://formy-project.herokuapp.com/form</expectedValue>
	<crucial>TRUE</crucial>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK GET REQUEST STATUS WITHOUT NAVIGATION ]═══════════════════════════════════════════════════════════════════════════════════════════════════════
To check the Get Requests status of a URL without navigating and to make it crucial.  To make it non-crucial change the last parameter to false.
The Space between check and get is optional as shown below.
<step>
	<command>checkget</command>
	<actionType>read</actionType>
	<expectedValue>200</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://www.swtestacademy.com/about-software-test-academy/ </arg1>
	</arguments>
</step>

Alternative way splitting the words apart.
<step>
	<command>check get</command>
	<actionType>read</actionType>
	<expectedValue>200</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://www.swtestacademy.com/about-software-test-academy/ </arg1>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK POST REQUEST STATUS WITHOUT NAVIGATION ]══════════════════════════════════════════════════════════════════════════════════════════════════════
<!-- Test results unconfirmed!!! Need to find suitable URL that allows posting. -->
To check the Post Requests status of a URL without navigating and to make it crucial.  To make it non-crucial change the last parameter to false.
The Space between check and post is optional as shown below.
<step>
	<command>checkpost</command>
	<actionType>read</actionType>
	<expectedValue>200</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://www.swtestacademy.com/about-software-test-academy/ </arg1>
	</arguments>
</step>

Alternative way splitting the words apart.
<step>
	<command>check post</command>
	<actionType>read</actionType>
	<expectedValue>200</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://www.swtestacademy.com/about-software-test-academy/ </arg1>
	</arguments>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK DOCUMENT READY STATE COMPLETE WITHOUT NAVIGATION AS A POST NAVIGATION STEP]═══════════════════════════════════════════════════════════════════
To check that the document ready state is complete after previously navigating to a new page and to make it crucial. 
NOTE: The first argument must be n/a as shown below.  
- Omitting this argument or leaving it empty will result in an invalid format exception.
To make it non-crucial change the last parameter to false.
This will be most useful for triggered navigation.
<step>
	<command>wait for page</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>n/a</arg1>
		<arg2>30</arg2>
	</arguments>
</step>

═════════[ CHECK DOCUMENT READY STATE COMPLETE WITH NAVIGATION IN A SINGLE STEP]═══════════════════════════════════════════════════════════════════════════════
To check that the document ready state is complete after navigating to a new page and to make it crucial. 
To make it non-crucial change the last parameter to false.
<step>
	<command>wait for page</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://formy-project.herokuapp.com/form</arg1>
		<arg2>30</arg2>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK AN ANCHOR HREF ]══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To check an anchor's href url and to make it non-crucial.  To make it crucial change the last parameter to true.
This will check the value of the href and compare it to the expected value provided.
<step>
	<command>check_a_href</command>
	<actionType>read</actionType>
	<expectedValue>https://www.swtestacademy.com/about-software-test-academy/ </expectedValue>
	<crucial>FALSE</crucial>
	<accessor>//*[@id="menu-item-21"]/a</accessor>
	<accessorType>xPath</accessorType>
	<arguments>
		<arg1>alt</arg1>
	</arguments>
</step>


Alternative way splitting the words.
<step>
	<command>check a href</command>
	<actionType>read</actionType>
	<expectedValue>https://www.swtestacademy.com/about-software-test-academy/ </expectedValue>
	<crucial>FALSE</crucial>
	<accessor>//*[@id="menu-item-21"]/a</accessor>
	<accessorType>xPath</accessorType>
	<arguments>
		<arg1>alt</arg1>
	</arguments>
</step>


═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK ALL PAGE LINKS USING URL ]════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To check all page links and to make it non-crucial.  To make it crucial change the last parameter to true.
This will check for a status code of 200 for all links on the page, based on the URL in the arg1 node, 
but will report the status code for all links.
<step>
	<command>check links</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://nutrish.com/</arg1>
	</arguments>
</step>

═════════[ CHECK ALL PAGE LINKS WITHOUT USING URL ]════════════════════════════════════════════════════════════════════════════════════════════════════════════
This will check for a status code of 200 for all links on the current page, but will report the status code for all links.
<step>
	<command>check links</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CHECK THE COUNT OF A SPECIFIC ELEMENT ON A PAGE ]═══════════════════════════════════════════════════════════════════════════════════════════════════
To check the count of a specific element on a page and to make it non-crucial.  To make it crucial change the last parameter to true.
This will count the number of times an element is found on a page and compare that to the expected value.
In the example below, the test compares the number of "a" tags on the page with the expected number of 18.
If the page has 18 "a" tags, the test passes, otherwise it fails.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
<step>
	<command>check count</command>
	<actionType>read</actionType>
	<expectedValue>18</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>a</arg1>
	</arguments>
</step>

═════════[ CHECK ALL PAGE IMAGE SRC TAGS WITH SEPARATE NAVIGATION STEP ]═══════════════════════════════════════════════════════════════════════════════════════
To check all page image src tags, on the current page, to ensure a source exists and to make it non-crucial.  To make it crucial change the last parameter to true.
The src tag will be checked to see if it exists and if it returns a status code of 200 for all image sources but will report the status of all image sources.
<step>
	<command>check images src</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
</step>

═════════[ CHECK ALL PAGE IMAGE SRC TAGS WITH NO SEPARATE NAVIGATION STEP ]════════════════════════════════════════════════════════════════════════════════════
To check all page image src tags, on the page specified in the arg1 node, to ensure a source exists and to make it non-crucial.  To make it crucial change the last parameter to true.
The src tag will be checked to see if it exists and if it returns a status code of 200 for all image sources but will report the status of all image sources.
<step>
	<command>check images src</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://semantic-ui.com/modules/dropdown.html</arg1>
	</arguments>
</step>

═════════[ CHECK ALL PAGE IMAGE ALT TAGS WITH SEPARATE NAVIGATION STEP ]═══════════════════════════════════════════════════════════════════════════════════════
To check all page image alt tags, for ADA compliance and to make it crucial.  To make it non-crucial change the last parameter to false.
The alt tag will checked to see if it exists and is not empty.  Empty tags will be flagged as failed.
This is a small part of 508 compliance.
<step>
	<command>check images alt</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
</step>

═════════[ CHECK ALL PAGE IMAGE ALT TAGS WITH NO SEPARATE NAVIGATION STEP ]════════════════════════════════════════════════════════════════════════════════════
To check all page image alt tags, for ADA compliance and to make it crucial.  To make it non-crucial change the last parameter to false.
The alt tag will checked to see if it exists and is not empty.  Empty tags will be flagged as failed.
This is a small part of 508 compliance.
<step>
	<command>check images alt</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>https://semantic-ui.com/modules/dropdown.html</arg1>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ WAITING A SPECIFIC AMOUNT OF TIME FOR ITEMS TO BE AVAILABLE ]═══════════════════════════════════════════════════════════════════════════════════════
To wait for a specific amount of time before continuing to allow for page loading or script completion.
To wait for 5 thousand milli-seconds before continuing onto the next step.
<step>
	<command>wait</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>10000</arg1>
	</arguments>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ WAITING FOR THE PRESENCE OF AN ELEMENT ]════════════════════════════════════════════════════════════════════════════════════════════════════════════
To wait for an element to be present, requires checking for the element using an accessor unlike waiting a specific amount of time.
To wait for for a maximum of 15 seconds for an element to be present and making this check crucial, use the following.
To make it non-crucial change the last parameter to false.
╠/html/body/div[4]/div/div[2]/div[4]/div[1]/div[2]/div ; wait ╬ 15 ; xPath ; true ; true╣
<step>
	<command>wait for element</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>//*[@id="slider-3"]/div/div[1]/div/h3</accessor>
	<accessorType>xPath</accessorType>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ WAITING FOR DOCUMENT READY STATE COMPLETE ]═════════════════════════════════════════════════════════════════════════════════════════════════════════
To wait for the page to fully load and document state to be complete, use the following command.
Please note that the accessor is set to page and that an accessor type is present.  Any Accessor Type must be present, although it is not used,
to distinguish this document ready state complete wait from a time interval wait.
To wait for for a maximum of 15 seconds for document state complete and to make this check crucial, use the following.
To make it non-crucial change the last parameter to false.
╠page ; wait ╬ 15 ; xPath ; true ; true╣
###  ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
<step>
	<command>wait for page</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>https://www.marvel.com/</arg1>
		<arg2>30</arg2>
	</arguments>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ UNIQUE IDENTIFIER ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Before explaining how to fill in text fields, we need to cover the Unique Identifier.
By default, every time a test is run, a unique identifier is created.
This unique identifier is composed of the date and time with no delimiters.
The purpose of this Unique Identifier is to allow rerunning the same tests and generating unique 
values by appending this Unique Identifier to the string, thus creating a unique data set each test run.
The Unique Identifier is 17 characters long and has the following format (yyyyMMddHHmmssSSS) ie.(20190402095619991).
 -  4 digit year, 2 digit month, 2 digit day, 2 digit hours, 2 digit minutes, 2 digit seconds, 3 digit milliseconds 
In the Filling in and SendKeys sections, there are examples of exactly how to use this.
Anytime, the character sequence without parenthesis (**_uid_**), is used, that value is replaced with the Unique Identifier.

═════════[ PERSISTING RETRIEVED TEXT IN A VARIABLE FOR LATER USE ]═════════════════════════════════════════════════════════════════════════════════════════════
There may be a need to compare the value retrieved from one element with the value of another.
Unfortunately, this cannot be done directly, but a Persist action can be enacted allowing the storage of 
an element's value that can then be compared to the value of another element.
This accomplishes comparing one element value with another.
To persist the value of an element, use the following:
<step>
	<command>PersistString</command>
	<accessor>/html/body/div/h1</accessor>
	<accessorType>xPath</accessorType>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
</step>

═════════[ FILLING IN TEXT FIELDS ]════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
###  To fill in a field by ID and to make it non-crucial.  To make it crucial change the last parameter to true.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>John</arg1>
	</arguments>
</step>

To fill in a field by ID, appending the Unique Identifier to the name John, and to make it non-crucial.  To make it crucial change the last parameter to true.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>John**_uid_**</arg1>
	</arguments>
</step>

To fill in a field by ID and to make it non-crucial when it contains a reserved command like click.  To make it crucial change the last parameter to true.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>click</arg1>
	</arguments>
</step>

To fill in a field using the value you persisted in an earlier step use the following.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>PersistedString</arg1>
	</arguments>
</step>

To fill in a field by ID, add the Unique Id, and to make it non-crucial when it contains a reserved command like click.  To make it crucial change the last parameter to true.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>click**_uid_**</arg1>
	</arguments>
</step>

To fill in a field by ID with the persisted value, add the Unique Id, and to make it non-crucial.  To make it crucial change the last parameter to true.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>PersistedString**_uid_**</arg1>
	</arguments>
</step>

To compare the persisted value to an element, use the following:
<step>
	<command>assert</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
	<accessor>/html[1]/body[1]/div[1]/form[1]/div[1]/div[4]/div[1]</accessor>
	<accessorType>xPath</accessorType>
	<expectedValue>PersistedString</expectedValue>
</step>

To retrieve the text of an element by xPath and compare it to the persisted value and assert that it is not equal.
<step>
	<command>assert</command>
	<actionType>read</actionType>
	<crucial>FALSE</crucial>
	<accessor>/html[1]/body[1]/div[1]/form[1]/div[1]/div[4]/div[1]</accessor>
	<accessorType>xPath</accessorType>
	<expectedValue>PersistedString</expectedValue>
	<arguments>
		<arg1>!=</arg1>
	</arguments>
</step>

Although the following can be found in the sendkeys section, in an effort to group all persistence in one 
location it is duplicated here.
There may be a need to send a persisted value to a control and that can be done as follows.
To send the persisted value to a textbox or textarea form control, use the following:
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>FALSE</crucial>
	<accessor>first-name</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>PersistedString</arg1>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
═════════[ CLICK AN ELEMENT IN AN IFRAME ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To click an element by xPath in an iFrame.
Note that the name of the iFrame is the first argument and the action to take is the second argument.
<step>
	<command>Switch to iFrame</command>
	<actionType>write</actionType>
	<crucial>false</crucial>
	<accessor>//button[contains(@id,'menu1')]</accessor>
	<accessorType>xPath</accessorType>
	<arguments>
		<arg1>iframeResult</arg1>
		<arg2>click</arg2>
	</arguments>
</step>

═════════[ SELECT AN OPTION FROM AN HTML SELECT ELEMENT ]══════════════════════════════════════════════════════════════════════════════════════════════════════
To select an option from an HTML Select (drop down/list) element there are two methods.
Sendkeys can be used to select an item based on its text or Click can be used on the option
actually being selected.
<step>
	<command>sendkeys</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<accessor>select-menu</accessor>
	<accessorType>ID</accessorType>
	<arguments>
		<arg1>0-1</arg1>
	</arguments>
</step>

Alternate method of selecting an option from an HTML select element.
<step>
	<command>click</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<accessor>option[value='1']</accessor>
	<accessorType>CssSelector</accessorType>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ TAKING SCREENSHOTS ]════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
To take a screen shot/print screen.  The browser will be resized automatically to capture all page content.
╠n/a ; ScreenShot ; n/a ; true ; false╣
<step>
	<command>screenshot</command>
	<actionType>write</actionType>
	<crucial>false</crucial>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ SWITCHING BROWSER TABS ]════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Some actions are related and to avoid unnecessary steps the enter key will be pressed after right clicking and arrowing to a particular item.
To Right click on an element, move down to the first menu item, click it to open in a new tab and switch to the new tab:
╠//*[@id="rso"]/div[1]/div/div[1]/div/div/div[1]/a ; right click ╬ Keys.Arrow_Down ╬ Switch to tab ; xPath ; true ; false╣
<step>
	<command>right click</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<accessor>//*[@id="block-menu-menu-dc-menu"]/div/div/ul/li[2]/a</accessor>
	<accessorType>xPath</accessorType>
	<arguments>
		<arg1>Keys.Arrow_Down</arg1>
		<arg2>Keys.Enter</arg2>
		<arg3>switch to tab</arg3>
	</arguments>
</step>

Alternatively, the steps can be separated into two separate steps where the 
context menu opens a new tab and then the next step switches to the second tab.
<step>
	<command>right click</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<accessor>//*[@id="block-menu-menu-dc-menu"]/div/div/ul/li[2]/a</accessor>
	<accessorType>xPath</accessorType>
	<arguments>
		<arg1>Keys.Arrow_Down</arg1>
		<arg2>Keys.Enter</arg2>
	</arguments>
</step>

<step>
	<command>Switch to tab</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
</step>
Alternate Switch to tab command with the tab specified as an argument.
Currently, 1 and 0 are the only acceptable values as only one child tab should be opened per test
and to switch to the child tab use 1.  To switch to the main (parent) tab use 0.
<step>
	<command>Switch to tab</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>1</arg1>
	</arguments>
</step>

To Switch back to the first tab after switching to the second tab.
Note that this requires 0 (Zero) to be specified in the command.
<step>
	<command>Switch to tab 0</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ FIND ELEMENTS THAT HAVE SPECIFIC TEXT ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════
There are times when you may need to search for text but do not know the accessor necessary to find that text.
The Find functionality allows you search all elements regardless of type or just all tags of a specific type for a phrase.
Additionally, the Find functionality returns the xPath of all elements where the text is found, but when searching 
for text without specifying a tag, only the actual tag containing the text is returned, not elements in the upper 
hierarchy; however, when using a specific tag, if a child tag of that tag contains the text, the searched tag will be returned 
as successfully containing that text. 
To Find text searching all elements and make this non-crucial, use the following.
<step>
	<command>find</command>
	<actionType>read</actionType>
	<expectedValue>Highest level of education</expectedValue>
	<crucial>FALSE</crucial>
</step>

To Find text searching all div elements and make this non-crucial, use the following.
<step>
	<command>find</command>
	<actionType>read</actionType>
	<expectedValue>Highest level of education</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>div</arg1>
	</arguments>
</step>

To Find text searching all label elements and make this non-crucial, use the following.
<step>
	<command>find</command>
	<actionType>read</actionType>
	<expectedValue>Highest level of education</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>label</arg1>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ FIND ELEMENTS THAT CONTAIN TEXT ]═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════
There are times when you may need to search for a portion of text but do not know the accessor necessary to find that text.
A specific instance might be when searching for text that would be in a paragraph.  
You wouldn't want to add the entire paragraph when you can add a snippet to verify that part of it is there. 
Additionally, the Find functionality returns the xPath of all elements where the text is found.
To Find element containing text searching all div elements and make this non-crucial, use the following.
<step>
	<command>find</command>
	<actionType>read</actionType>
	<expectedValue>Highest level</expectedValue>
	<crucial>FALSE</crucial>
	<arguments>
		<arg1>div</arg1>
		<arg1>contains</arg1>
	</arguments>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ FIND ELEMENTS ON A PAGE TO HELP MAKE A TEST FILE - NOT FOR TESTING BUT FOR HELPING TO CREATE TESTS ]════════════════════════════════════════════════
IMPORTANT NOTE #1: ANY PARENT ELEMENT WILL CONTAIN THE TEXT OF IT'S CHILD ELEMENT(s) SO TO GET THE ELEMENT THAT ACTUALLY 
                  CONTAINS THE INFORMATION DESIRED, TRY TO ELIMINATE THE HIERARCHICAL ITEMS ABOVE THAT ARE NOT DESIRED, 
                  LIKE CONTAINER ELEMENTS.  Examples include (html,head,body,div,table)
  IMPORTANT NOTE #2: ENSURE THAT YOUR FILE PATH DOES NOT CONTAIN ANY KEYWORD USED FOR ANY OTHER ACTION, OR YOU WILL GET UNEXPECTED RESULTS!!!
  A test file needs to be created and you would like to spare yourself the hassle of looking up elements, associated properties and attributes.
  To do this, create a test script, with a Navigate command, to Navigate to the page to be tested and then use the 
  create_test_page command or the create_test_page_formatted command.
  The create_test_page command outputs key value information so that a determination can be made to as to whether an item should be tested and 
  it provides all of the information to create the test command but it is not formatted as a test command.
  The create_test_page_formatted command outputs the element information in a test command format allowing for quick copy and paste to a test file.
  Both files indicate if an element is visible, if an a tag is acting as an anchor or a link.
  The Formatted File, will create tests for a tags that check text and href, for images that check src, for text fields it create tests that compare text 
	 provided with the element text, for text input it creates a sendkeys, for buttons, checkboxes and radio buttons it creates a click, 
	 and for selects it creates a select command, allowing the user to enter one of the option values that is to be selected.
  The create_test_page command and the create_test_page_formatted command take the following test parameters:
   - arg1 is the Tag Type.  Use * for all tags, or div for just div tags etc...
		 -    Element Type: A single element with * being all elements and the default if left empty.
			 -   Elements Include but are not limited to: *, html, head, title, body, a, ol, ul, li, select, input etc...
			 -   If omitted, this will be * for all elements.
   - arg2 is the File where the Tags will be written.
		 -    File Path and File Name: This is where the results will be written.
			 -   If omitted, this will be written to the config folder. (/config/newTestFile.txt)
   - arg3 is the comma delimited list of Tags to exclude.
		 -    A comma delimited list of elements to skip when retrieving all element (*) information.
			 -   These would usually be elements that do not have text themselves but contain elements that do have text.
			 -   Do not include spaces between elements, just a comma as follows: html,head,title,body,div
			 -   Skip elements are ONLY APPLIED WHEN RETRIEVING ALL ELEMENTS and IGNORED WHEN RETRIEVING A SPECIFIC TAG TYPE.
  The following two examples gets all page elements, saves them to a file, skips a list of container and other elements.
<step>
	<command>create_test_page_formatted</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>*</arg1>
		<arg2>C:\Users\gjackson\Downloads\Ex_Files_Selenium_EssT\Ex_Files_Selenium_EssT\Exercise Files\ConfigurableAutomatedTester\Tests\TestPages\Formy-Test.xml</arg2>
		<arg3>html,head,title,meta,script,body,style,nav,br,div,form</arg3>
	</arguments>
</step>


The following example gets all anchor tag elements, saves them to a file, and ignores the skips list because all elements are not being retrieved.
<step>
	<command>create_test_page_formatted</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>a</arg1>
		<arg2>C:\Users\gjackson\Downloads\Ex_Files_Selenium_EssT\Ex_Files_Selenium_EssT\Exercise Files\ConfigurableAutomatedTester\Tests\TestPages\TestFileOutput_A_Only.txt</arg2>
		<arg3>html,head,title,meta,script,body,style,nav,br,div,form</arg3>
	</arguments>
</step>

The following example is the correct equivalent of the previous command.
<step>
	<command>create_test_page_formatted</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>a</arg1>
		<arg2>C:\Users\gjackson\Downloads\Ex_Files_Selenium_EssT\Ex_Files_Selenium_EssT\Exercise Files\ConfigurableAutomatedTester\Tests\TestPages\TestFileOutput_A_Only.txt</arg2>
	</arguments>
</step>
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ CONNECT TO SQL SERVER DATABASE AND CLOSE THE CONNECTION ]═══════════════════════════════════════════════════════════════════════════════════════════
There will be times during the course of QAing a site where querying the database can confirm that a value has been 
added or removed.
IMPORTANT: ENSURE THAT YOU ALWAYS CREATE A CLOSE CONNECTION TEST STEP TO CLOSE THE CONNECTION YOU OPEN!!!!
To do this, you must first establish a connection to the database and this is how to do that.
There are two ways to establish a connection to Sql Server. 
<step>
	<!-- Open Connection to Sql Server -->
	<command>Connect to Database</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<!-- Type of Database (MongoDb, Sql Server)-->
		<arg1>SQL Server</arg1>
		<!-- Database to connect to -->
		<arg2>PocFisForumV2</arg2>
		<!-- user name -->
		<arg3>forum_user</arg3>
		<!-- password -->
		<arg4>forum_user</arg4>
		<!-- connection type - not currently used -->
		<arg5>local</arg5>
	</arguments>
</step>

The alternative method with more control but with more risk of failure.
<step>
	<command>Connect to Database</command>
	<actionType>write</actionType>
	<crucial>true</crucial>
	<arguments>
		<!-- Type of Database (MongoDb, Sql Server)-->
		<arg1>SQL Server</arg1>
		<!-- Connection String or Close to close the connection -->
		<!-- when using a uri, escape all illegal xml characters (escape: ampersands with &amp;) -->
		<arg2>jdbc:sqlserver://localhost:1433;database=PocFisForumV2;user=forum_user;password=forum_user;encrypt=false;trustServerCertificate=true;loginTimeout=30;</arg2>
		<!-- arg2>jdbc:sqlserver://local.database.windows.net:1433;database=PocFisForumV2;user=forum_user;password=forum_user;encrypt=true;trustServerCertificate=false;loginTimeout=30;</arg2 -->
		<!-- currently not implemented but created to distinguish between local and non-local SQL databases -->
		<arg3>local</arg3>
	</arguments>
</step>

═════════[ CLOSING THE DATABASE CONNECTION ]═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Equally important as opening the database connection object, is closing the database connection object.
Open connections consume resources and unclosed connections can use up all available memory or an 
allotment of connections depending on where the connection lives.
To avoid this, always write a close connection command whenever writing an open connection command.
The close command is simple and as follows:
<step>
	<command>Close Database Connection</command>
	<actionType>write</actionType>
	<crucial>TRUE</crucial>
	<arguments>
		<arg1>SQL Server</arg1>
	</arguments>
</step>


═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

═════════[ QUERYING THE SQL SERVER DATABASE  ]═════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When testing a site, there sometimes needs to be verification that a value was 
actually written to, or removed from the database.  
This is the purpose of the Sql Server Query Command.
There are two ways to query the database.
First option: Specify the Table, Field and Where clause separately.
The last argument is the comparison type and must be included for != test steps, 
but is optional for = test steps.
<step>
	<command>Sql Server Query</command>
	<actionType>read</actionType>
	<expectedValue>General</expectedValue>
	<crucial>false</crucial>
	<arguments>
		<!-- Table to query or select statement -->
		<arg1>[POCFISForumV2].[dbo].[Forums]</arg1>
		<!-- Field to query -->
		<arg2>Forum</arg2>
		<!-- where clause - optional -->
		<arg3>where ForumId = 1</arg3>
	</arguments>
</step>

Second Option: Specify the entire Select statement.
<step>
	<command>Sql Server Query</command>
	<actionType>read</actionType>
	<expectedValue>FAQ</expectedValue>
	<crucial>false</crucial>
	<arguments>
		<!-- Table to query or select statement -->
		<arg1>Select Forum from [POCFISForumV2].[dbo].[Forums] where ForumId = 2</arg1>
	</arguments>
</step>

Second Option Alternative type of SQL Select Statement: Specify the entire Select statement.
<step>
	<command>Sql Server Query</command>
	<actionType>read</actionType>
	<expectedValue>FAQ</expectedValue>
	<crucial>false</crucial>
	<arguments>
		<!-- Table to query or select statement -->
		<arg1>Select Top(1) Forum from [POCFISForumV2].[dbo].[Forums]</arg1>
	</arguments>
</step>

═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                              TROUBLESHOOTING                                                                                                           ║
╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
DRIVER ISSUES
If you run the application and the browser briefly opens and then closes:
Check you local browser version and compare that with the corresponding web driver for that browser.
If these are not the same, upgrade the web driver for this browser and it should work.
═════════════════════════════════════════════════════════

URL VALIDATION FAILURE
When you enter a url into your web browser although the trailing slash may be there or may not be there, the returned URL from the test app differs.
Update your test to reflect what the test app is returning as this is the actual URL for this page.
═════════════════════════════════════════════════════════

MISSING CONFIGURATION FILE
If you are running in JUnit and see the following message, the config file is not in the correct location or has the wrong name.
Configuration File not found! (Config/ConfigurationSetup.tconfig)
Place the configuration file in the location above with the name specified and re-run the test.
Exiting!!!
configSettings is null!!!
═════════════════════════════════════════════════════════

UNEXPECTED OUTPUT FROM A TEST STEP
If you have an unexpected output or outcome of a test step, check the Action/Expected value field in your test 
and ensure that there is no keyword in there that the application may attempt to execute instead of the action intended.
The test will have to be re-written to account for this.
A specific SendKeys keyword was added to send text that could be misconstrued because it contains keywords.
While this particular solution may not be the one you need, there is likely a solution but if not, please document the issue 
so that it can be addressed in future implementations.
═════════════════════════════════════════════════════════


###  ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════


═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════


═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════


═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════


